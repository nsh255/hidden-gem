# HIDDEN GEM - DOCUMENTACIÓN DEL BACKEND

## VISIÓN GENERAL
HiddenGem es una aplicación diseñada para descubrir juegos indie poco conocidos y joyas escondidas en el mundo de los videojuegos. Este documento describe la estructura, endpoints y funcionalidades del backend.

## TECNOLOGÍAS UTILIZADAS
- **Lenguaje de programación**: Python 3
- **Framework**: FastAPI
- **Base de datos**: PostgreSQL
- **ORM**: SQLAlchemy
- **Scraping**: Scrapy (para obtener datos de Steam)
- **Integración externa**: API de RAWG
- **Contenerización**: Docker

## ESTRUCTURA DEL PROYECTO
```
backend/
├── app/
│   ├── main.py                # Punto de entrada principal
│   ├── database.py            # Configuración de conexión a base de datos
│   ├── models/                # Modelos de SQLAlchemy
│   ├── routes/                # Endpoints API agrupados por funcionalidad
│   │   ├── auth.py            # Autenticación y registro
│   │   ├── games.py           # Gestión de juegos
│   │   ├── scraper.py         # Control del web scraper
│   │   ├── recommendations.py # Sistema de recomendaciones
│   │   └── rawg.py            # Integración con RAWG API
│   └── scraper/               # Módulo de scraping
│       └── steam_scraper/     # Scraper específico para Steam
│           ├── pipelines.py   # Procesamiento de datos scrapeados
│           ├── settings.py    # Configuración del scraper
│           └── spiders/       # Arañas de Scrapy
```

## ENDPOINTS API
El backend expone los siguientes grupos de endpoints:

### Raíz
- `GET /`: Información básica sobre la API

### Autenticación (prefijo: /api/auth)
- Registro y login de usuarios
- Gestión de tokens JWT

### Juegos (prefijo: /api/games)
- CRUD para juegos en la base de datos
- Búsqueda y filtrado de juegos

### Scraper (prefijo: /api/scraper)
- `POST /api/scraper/run-spider`: Ejecuta el spider en segundo plano
- `POST /api/scraper/run`: Ejecuta el spider de forma síncrona

### Recomendaciones (prefijo: /api/recommendations)
- Endpoints para el sistema de recomendación de juegos

### RAWG API (prefijo: /api/rawg)
- `GET /api/rawg/details/{game_id}`: Obtiene detalles de un juego desde RAWG

## SCRAPER DE STEAM
El backend incluye un sistema de scraping para recopilar información de juegos indie desde Steam. 

### Características del scraper:
- Configurable para limitar el número de páginas a scrapear
- Caché HTTP con expiración de 24 horas
- Pipelines de procesamiento:
  - SteamScraperPipeline: Limpieza y filtrado inicial de datos
  - PostgreSQLPipeline: Almacenamiento en base de datos
  - JsonPipeline: Opcionalmente, guardado en archivos JSON

### Comportamiento de guardado:
- Verifica si el juego ya existe por app_id, URL o título
- Actualiza juegos existentes o crea nuevos registros
- Estadísticas de procesamiento (añadidos, actualizados, errores)
- Solo guarda juegos marcados como "indie"

## MODELOS DE DATOS
La aplicación utiliza SQLAlchemy ORM con PostgreSQL y tiene los siguientes modelos principales:

### Game (juego)
Atributos:
- title: Título del juego
- price: Precio
- genres: Géneros (array)
- tags: Etiquetas (array)
- url: URL en Steam
- description: Descripción completa
- is_indie: Booleano (todos son true)
- source: Fuente de los datos (por defecto "steam")
- app_id: ID de la aplicación en Steam

## CONFIGURACIÓN
La aplicación utiliza variables de entorno para la configuración:
- DATABASE_URL: URL de conexión a PostgreSQL
- Otras configuraciones de autenticación y APIs externas

## AUTENTICACIÓN
Sistema basado en JWT para autenticar usuarios y proteger endpoints.

## INTEGRACIÓN CON DOCKER
La aplicación está contenerizada para facilitar el desarrollo y despliegue.

## NOTAS PARA DESARROLLO DEL FRONTEND
Para el desarrollo del frontend, considere:

1. Implementar autenticación con manejo de tokens JWT
2. Crear una interfaz para visualizar juegos indie con filtrado por géneros/tags
3. Desarrollar una sección de recomendaciones personalizadas
4. Interfaz para ver detalles completos de juegos (utilizando datos de RAWG y Steam)
5. Opcionalmente, un panel de administración para controlar el scraper

Los endpoints principales para integrar son:
- Autenticación: /api/auth/login, /api/auth/register
- Listado de juegos: /api/games/
- Detalles de juego: /api/games/{id} y /api/rawg/details/{game_id}
- Recomendaciones: /api/recommendations/

Todos los endpoints devuelven respuestas en formato JSON.
