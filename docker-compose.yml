version: '3'

services:
  postgres:
    image: postgres:13
    container_name: hidden-gem-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hiddengem
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: hidden-gem-backend
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/hiddengem
      - SECRET_KEY=${SECRET_KEY:-insecure_key_for_dev}
      - RAWG_API_KEY=${RAWG_API_KEY:-your_rawg_api_key}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./.env:/app/.env
    command: >
      sh -c "pip install -r requirements.txt && pip install pydantic-settings &&
            uvicorn app.main:app --host 0.0.0.0 --reload"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hidden-gem-frontend
    restart: always
    depends_on:
      - backend
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: >
      sh -c "
        # Crear directorio de assets si no existe
        mkdir -p /app/src/assets/images;
        
        # Crear imagen placeholder si no existe
        if [ ! -f /app/src/assets/images/placeholder.jpg ]; then
          echo 'Creando imagen placeholder...';
          echo 'iVBORw0KGgoAAAANSUhEUgAAASwAAACoCAMAAABt9SM9AAAAA1BMVEX///+nxBvIAAAAR0lEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO8GxYgAAb0jQ/cAAAAASUVORK5CYII=' | base64 -d > /app/src/assets/images/placeholder.jpg;
        fi;
        
        # Crear proxy.conf.json si no existe
        if [ ! -f /app/proxy.conf.json ]; then
          echo 'Creando proxy.conf.json...';
          echo '{
            \"/api\": {
              \"target\": \"http://backend:8000\",
              \"secure\": false,
              \"changeOrigin\": true,
              \"logLevel\": \"debug\"
            }
          }' > /app/proxy.conf.json;
        fi;
        
        # Instalar dependencias si no est√°n instaladas
        if [ ! -d '/app/node_modules/@angular' ]; then
          echo 'Instalando dependencias...';
          npm install;
        fi;
        
        # Iniciar el servidor de desarrollo de Angular
        ng serve --host 0.0.0.0 --disable-host-check --poll=2000 --proxy-config proxy.conf.json
      "

volumes:
  postgres_data:
